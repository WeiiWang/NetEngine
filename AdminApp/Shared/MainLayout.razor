@inherits LayoutComponentBase
@using System.IdentityModel.Tokens.Jwt;
@using Models.User
@using Models.Article

<Layout>
    <Header Class="header" style="display:flex;margin-left:-30px">

        <div class="logo"><img src="/img/logo.png" style="width:180px;height:31px" /></div>
        <Menu Theme="MenuTheme.Dark" Mode="MenuMode.Horizontal" DefaultSelectedKeys=@(new []{"1"})>
            <MenuItem Key="1" OnClick="()=>changeShow(0)">内容管理</MenuItem>
            <MenuItem Key="2" OnClick="()=>changeShow(1)">系统设置</MenuItem>
        </Menu>


        <div style="margin-left:70%">
            <Avatar Src="/img/touxiang.jpg" Size="large" />

            <Dropdown>
                <Overlay>
                    <Menu>
                        <MenuItem OnClick="Logout">
                            注销登录
                        </MenuItem>
                    </Menu>
                </Overlay>
                <ChildContent>
                    <a class="ant-dropdown-link" @onclick:preventDefault style="color: rgba(255,255,255,.7)">
                        您好，@user.NickName  <Icon Type="down" Style="margin-left: 5px;font-size:1.1em;" />
                    </a>
                </ChildContent>
            </Dropdown>
        </div>


    </Header>
    <Layout>
        <Sider Width="200" Class="site-layout-background">

            @switch (showIndex)
            {
                case 0:
                    {
                        <Menu Mode="MenuMode.Inline" Style="height: 100%; border-right: 0;">

                            @foreach (var channel in channelList)
                            {
                                <SubMenu IsOpen Title="@channel.Name">
                                    <MenuItem>文章管理</MenuItem>
                                    <MenuItem> <a href="/category/@channel.Id">栏目管理</a></MenuItem>
                                </SubMenu>
                            }

                        </Menu>
                        break;
                    }

                case 1:
                    {
                        <Menu Mode="MenuMode.Inline" DefaultSelectedKeys=@(new[] {"1"}) DefaultOpenKeys=@(new[] {"sub2","sub3","sub4"}) Style="height: 100%; border-right: 0;">


                            <SubMenu Key="sub2" Title="系统用户">
                                <MenuItem><a href="/user">所有用户</a></MenuItem>
                            </SubMenu>

                            <SubMenu Key="sub3" Title="频道管理">
                                <MenuItem><a href="/channel">所有频道</a></MenuItem>
                            </SubMenu>

                            <SubMenu Key="sub4" Title="友链管理">
                                <MenuItem><a href="/link">所有友链</a></MenuItem>
                            </SubMenu>

                            <SubMenu Key="sub5" Title="网站信息">
                                <MenuItem>信息维护</MenuItem>
                            </SubMenu>

                        </Menu>
                        break;
                    }
            }




        </Sider>

        @Body

    </Layout>
</Layout>

<style>
    #components-layout-demo-top-side-2 .logo {
        width: 120px;
        height: 31px;
        background: rgba(255, 255, 255, 0.2);
        margin: 16px 28px 16px 0;
        float: left;
    }

    .site-layout-background {
        background: #fff;
    }
</style>

@code{

    private dtoUser user = new();

    int showIndex = 0;


    override protected void OnInitialized()
    {
        Authentication();
        GetChannelList();
    }


    private List<dtoChannel> channelList = new();
    async void GetChannelList()
    {
        dtoPageList<dtoChannel> pageList = await Http.GetFromJsonAsync<dtoPageList<dtoChannel>>("Article/GetChannelList?pageNum=1&pageSize=9999");

        channelList = pageList.List;
        StateHasChanged();
    }



    private async void Authentication()
    {
        var authorization = LocalStorage.GetItem<string>("Authorization");

        if (string.IsNullOrEmpty(authorization))
        {
            NavigationManager.NavigateTo("/login");
        }
        else
        {
            var securityToken = new JwtSecurityToken(authorization);

            var expTimeL = Convert.ToInt64(securityToken.Claims.ToList().Where(t => t.Type == "exp").FirstOrDefault().Value);

            var expTime = TimeZoneInfo.ConvertTimeToUtc((new DateTime(1970, 1, 1)).ToLocalTime()).ToLocalTime().AddSeconds(expTimeL);

            if (expTime < DateTime.Now)
            {
                NavigationManager.NavigateTo("/login");
            }
            else
            {
                try
                {
                    user = await Http.GetFromJsonAsync<dtoUser>("User/GetUser");
                }
                catch
                {
                    LocalStorage.RemoveItem("Authorization");
                    NavigationManager.NavigateTo("/login");
                }


                StateHasChanged();
            }
        }
    }


    private void Logout()
    {
        LocalStorage.RemoveItem("Authorization");

        NavigationManager.NavigateTo("/login");
    }

    void changeShow(int _showIndex)
    {
        showIndex = _showIndex;
        StateHasChanged();
    }

}



